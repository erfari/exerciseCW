Input
['4L2', '3R4', '4L3', '3L4', '4R0', '1L2'] # example
As an argument, you are given gamelog - an array of commands which you need to interpret.

Each command has the same form:

The first character - the type of block (integer from 1 to 4, as in this kata we have only 4 types of blocks). Block types are described below.
The second - the direction of movement ("R" or "L" - right or left).
The third is an offset (integer from 0 to 4, as width of our field 9 units and new block always appears at the center of the field) relative to the starting position. Thus, L4 means the leftmost position, and R4 the rightmost, and L0 is equivalent to R0.
Output
The total number of cleaned horizontal lines (int) to the end of the game. Note, if the field height is exceeded, then the game ends immediately.

Blocks
In this kata we have only 4 types of blocks. Yes, this is not a classic set of shapes, but this is only for simplicity.

# and their graphical representation:
             ■
         ■   ■
     ■   ■   ■
 ■   ■   ■   ■
---+---+---+---
#1  #2  #3  #4
Field
Gamefield (a rectangular vertical shaft) has width 9 units and height 30 units.

Indeces can be represented as:

L4	L3	L2	L1	L0/R0	R1	R2	R3	R4
Example 1
>>> gamelog = ['1R4', '2L3', '3L2', '4L1', '1L0', '2R1', '3R2', '4R3', '1L4']
>>> tetris(gamelog)
1
Gamefield before last command (_ means empty space):

____■___■
___■■__■■
__■■■_■■■
_■■■■■■■■
Gamefield after all commands:

___■___■_
__■■__■■_
_■■■_■■■_
As you can see, one solid line was cleared. So, answer is 1.

Example 2
>>> gamelog = ['1L2', '4R2', '3L3', '3L1', '1L4', '1R4']
>>> tetris(gamelog)
0
Gamefield after all commands:

 _____■__
_■_■__■__
_■_■__■__
■■■■__■_■
As you can see, there is no solid lines, so nothing to clear. Our answer is 0, zero cleaned lines.

Note
Since there is no rotation of blocks in our model and all blocks are very simple, do not otherthink the task.


Tests
Test.describe("Primitive Gameplay testing")

Test.it("Example tests")
Test.assert_equals(tetris(['1R4', '2L3', '3L2', '4L1', '1L0', '2R1', '3R2', '4R3', '1L4']), 1)
Test.assert_equals(tetris(['1L2', '4R2', '3L3', '3L1', '1L4', '1R4']), 0)
Test.assert_equals(tetris(['4R4', '4L3', '4L2', '4L1', '4L0', '4R1', '4R2', '4R3', '3L4']), 3)

Test.it("Basic tests")
cases = (
(['2L2', '3L3', '1R0', '2L1', '2L2', '3R2', '1L4', '2R1', '4L3', '4L4', '2L2', '3R4', '1R4', '2R3', '2L2', '3R1', '4L3', '3L1', '4L3', '4R0'], 2),
(['1R3', '4R3', '4L1', '2R4', '3R1', '2L4', '4R2', '1R4', '3R1', '3R4', '1R0', '1L4', '1L3', '3L2', '3R2', '1R2', '3L2', '1L3', '3L2', '2R2'], 1),
(['1R1', '4L1', '1R2', '4L3', '3L2', '1L3', '2L4', '2L2', '3R4', '4L3', '2L2', '2R2', '1R1', '2R4', '3L3', '3L3', '3L4', '1R3', '1L1', '3L2', '4R1', '1R3', '2L3', '2R3', '3R0', '2R2', '1R4', '1L2', '2R2', '2L2'], 3),
(['1L3', '2L1', '4L3', '2R4', '4L3', '3R2', '1R0', '2R4', '4L1', '4R3', '3R4', '3L1', '2R1', '1L2', '3R4', '4R1', '2R2', '4R4', '3L2', '4L1', '2R4', '3L4', '1L3', '3R1', '2R0', '2L4', '3R0', '3R3', '1R4', '1R1'], 4),
(['3R0', '3R4', '4L2', '4L3', '3L2', '3L1', '4L4', '1L3', '2R1', '3R3', '4L1', '1R4', '2R3', '1R4', '3L1', '3L4', '3R2', '4R4', '4L2', '4R2', '3L4', '4R1', '4R1', '3L4', '2L2', '2R1', '3R3', '1L3', '2L2', '3L4'], 3),
(['2L2', '2L1', '4L1', '4R4', '3L2', '3R0', '4R1', '4R0', '1L4', '2L1', '3L4', '3L2', '2R3', '3R0', '4R4', '3R2', '1R2', '3L3', '4R3', '4R1', '2L2', '3R0', '1L2', '3R0', '1L1', '1L4', '3R1', '2L1', '1L3', '3R2'], 4),
(['1L3', '4L1', '3L2', '4R1', '3R1', '4L4', '3L3', '3R4', '4R4', '4R2', '3L1', '3L4', '1R0', '1L3', '4L2', '2R1', '1L4', '1R3', '3L4', '1L3', '4L1', '4R0', '2R0', '4L2', '1R0', '4R0', '2R3', '2R0', '4R3', '2R1'], 4)
)
for gamelog, result in cases:
    Test.assert_equals(tetris(gamelog), result)
	
---------------------------------------------------
	
import operator
mydict = {}
def tetris(arr):
    for i in arr:
        a = i[1:3]
        b = int(i[0])
        mydict[a] = b
        if mydict[a] not in mydict:
            mydict[a] = b
        else:
            mydict[a] += b
    sorted_dict = sorted(mydict.items(), key=operator.itemgetter(1))
    if sorted_dict[0][1] == 0 or len(sorted_dict) < 9:
        return 0
    else:
        return sorted_dict[0][1]
-----------------------------------------------------